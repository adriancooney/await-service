#!/usr/bin/env babel-node --
import program from "commander";
import winston from "winston";
import { exec } from "child_process"
import pkg from "../package.json";
import check, { DEFAULT_DELAY, DEFAULT_TIMEOUT } from "../src";

let command, argv = process.argv.slice();
const partition = argv.indexOf("--");
if(partition > -1) {
    command = argv.slice(partition + 1);
    argv = argv.slice(0, partition);
}

program.on("--help", function(){
    winston.info([
        "  Examples:",
        "",
        "    $ prone tcp://google.com:80 -- echo \"Google is up!\"",
        "    $ prone redis rabbitmq && echo 'Hosts are up'",
        ""
    ].join("\n"));
});

program
    .version(pkg.version)
    .usage("<target ...>")
    .option("-t, --timeout <timeout>", `timeout after ms (default: ${DEFAULT_TIMEOUT}ms)`, parseInt)
    .option("-m, --max-attempts <attempts>", "maximum amount of attempts before failing", parseInt)
    .option("--delay <delay>", `the delay between healthchecks (default: ${DEFAULT_DELAY}ms)`, parseInt)
    .option("-d, --debug", "output debug logs")
    .parse(argv);

if(program.debug) {
    winston.level = "debug";
}

if(!program.args.length) {
    fail("Please specify some targets.");
}

winston.info("starting healthchecks:")
winston.info(" * " + program.args.join("\n * "));
Promise.all(program.args.map(target => {
    return check(target, {
        timeout: program.timeout,
        maxAttempts: program.maxAttempts,
        debug: program.debug,
        delay: program.delay
    }).catch(err => {
        throw Object.assign(err, { target });
    });
})).then(() => {
    winston.info("healthchecks completed successfully");
    if(command && command.length) {
        winston.info("executing: $ " + command.join(" "));
        const cmd = exec(command.join(" "), {
            cwd: process.cwd,
            shell: process.env.SHELL,
            env: process.env
        });

        cmd.stdout.pipe(process.stdout);
        cmd.stderr.pipe(process.stderr);
        cmd.on("exit", process.exit);
    }
}).catch(err => {
    if(err.target) {
        return fail(`[${err.target}] ${err.message}`);
    }

    return fail(err);
});

function fail(message, exitCode = 1) {
    if(message instanceof Error) {
        message = message.message;
    }

    winston.error("Error: " + message);
    process.exit(exitCode);
}